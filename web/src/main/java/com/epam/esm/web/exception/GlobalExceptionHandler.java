package com.epam.esm.web.exception;

import com.epam.esm.core.exception.GiftCertificateNotFoundException;
import com.epam.esm.core.exception.GiftCertificateOperationException;
import com.epam.esm.core.exception.TagNotFoundException;
import com.epam.esm.core.exception.TagOperationException;
import com.epam.esm.core.utils.ApiErrorResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import static com.epam.esm.core.constants.ErrorCodeConstants.*;

/**
 * GlobalExceptionHandler is responsible for handling exceptions in the application.
 * <p>
 * The class includes exception handling methods for the following types:
 * - {@link com.epam.esm.core.exception.GiftCertificateNotFoundException}: Handles the case where a requested
 *   gift certificate is not found.
 * - {@link com.epam.esm.core.exception.GiftCertificateOperationException}: Handles operations related to
 *   gift certificates that result in a bad request.
 * - {@link com.epam.esm.core.exception.TagNotFoundException}: Handles the case where a requested tag is not found.
 * - {@link com.epam.esm.core.exception.TagOperationException}: Handles operations related to tags that
 *   result in a bad request.
 * - {@link java.lang.Exception}: Handles general exceptions that do not fall into the specific categories above.
 * <p>
 * The error responses generated by this class include a custom {@link com.epam.esm.core.utils.ApiErrorResponse}
 * object containing the error message, error code, and HTTP status code.
 */
@RestControllerAdvice
public class GlobalExceptionHandler {

    /**
     * Handles the case where a {@link com.epam.esm.core.exception.GiftCertificateNotFoundException}
     * is thrown, and generates an HTTP 404 Not Found response.
     */
    @ExceptionHandler(GiftCertificateNotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public ResponseEntity<ApiErrorResponse> handleGiftCertificateNotFoundException(GiftCertificateNotFoundException ex) {
        return buildErrorResponse(ex, HttpStatus.NOT_FOUND, GIFT_CERTIFICATE_NOT_FOUND);
    }

    /**
     * Handles operations related to gift certificates that result in a bad request,
     * and generates an HTTP 500 Internal Server Error response.
     */
    @ExceptionHandler(GiftCertificateOperationException.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ResponseEntity<ApiErrorResponse> handleGiftCertificateOperationException(GiftCertificateOperationException ex) {
        return buildErrorResponse(ex, HttpStatus.INTERNAL_SERVER_ERROR, GIFT_CERTIFICATE_OPERATION_ERROR);
    }

    /**
     * Handles the case where a {@link com.epam.esm.core.exception.TagNotFoundException}
     * is thrown, and generates an HTTP 404 Not Found response.
     */
    @ExceptionHandler(TagNotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public ResponseEntity<ApiErrorResponse> handleTagNotFoundException(TagNotFoundException ex) {
        return buildErrorResponse(ex, HttpStatus.NOT_FOUND, TAG_NOT_FOUND);
    }

    /**
     * Handles operations related to tags that result in a bad request,
     * and generates an HTTP 500 Internal Server Error response.
     */
    @ExceptionHandler(TagOperationException.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ResponseEntity<ApiErrorResponse> handleTagOperationException(TagOperationException ex) {
        return buildErrorResponse(ex, HttpStatus.INTERNAL_SERVER_ERROR, TAG_OPERATION_ERROR);
    }

    /**
     * Handles general exceptions that do not fall into the specific categories above,
     * and generates an HTTP 500 Internal Server Error response.
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ResponseEntity<ApiErrorResponse> handleGeneralException(Exception ex) {
        return buildErrorResponse(ex, HttpStatus.INTERNAL_SERVER_ERROR, OTHER_EXCEPTION);
    }

    /**
     * Private utility method to build the error response containing the error message,
     * error code, and HTTP status code.
     */
    private ResponseEntity<ApiErrorResponse> buildErrorResponse(Exception ex, HttpStatus status, int errorCode) {
        ApiErrorResponse apiError = new ApiErrorResponse(ex.getMessage(), errorCode, status);
        return ResponseEntity.status(status).body(apiError);
    }
}
